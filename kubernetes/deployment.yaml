version: "3.8"

services:
  postgres:
    image: postgres:15
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: onlinestore
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  onlinestore:
    build:
      context: .
      dockerfile: Dockerfile
    image: onlinestore:latest
    container_name: onlinestore
    environment:
      # application.yml env'leriyle birebir uyumlu
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_NAME: onlinestore
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_SSLMODE: disable
      DB_MIN_IDLE: "5"
      DB_MAX_POOL: "10"
      DB_IDLE_TIMEOUT: "30000"
      DB_MAX_LIFETIME: "600000"
      DB_CONN_TIMEOUT: "30000"
      # Spring'in dış dünyaya dinleyeceği port (Render için de kullanışlı)
      PORT: "8080"
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    # Eğer imajında curl/wget yoksa healthcheck koyma; gerekirse Dockerfile'a ekleyip şunu açabilirsin:
    # healthcheck:
    #   test: ["CMD", "curl", "-fsS", "http://localhost:8080/health"]
    #   interval: 30s
    #   timeout: 5s
    #   retries: 5

volumes:
  postgres_data:
